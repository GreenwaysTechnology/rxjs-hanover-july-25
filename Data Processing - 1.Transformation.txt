									   Data Processing - 1.Transformation Operators


In Reactive programming , the data is streamed from one place(Observable)  into another Place called (Subscriber), while streaming, we can process the data using operators.

In order to process data , we have many data processing Operators:

1.Transformation Operators
2.Filtering Operator 
3.Join Operators
4.Error Handling operators
5.Mathematical operators
6.Conditional and Boolean Operators
7.Multicasting Operators
8.Utility Operators

1.Transformation Operators

1.1.map
1.2.mapTo
1.3.scan
1.4.window
1.5.groupBy
etc...

Transform the emitted values from an observable into a new Format or structure.

Data Processing

Create Observable:
   of().pipe(
     data processing operator,dataoperators
   ).subscribe(value=>console.log(value)
********************************************************************************************************************************************************
map:
   Used to transform each value emitted by an observable into new value using projection function

obs.pipe(map,x,y).subscribe()

import { map, of } from 'rxjs'
function main() {
    of(1, 2, 3, 4, 5)
        .pipe(
            map(x => x * 2)
        )
        .subscribe(val => console.log(val))
}
main()

Transform Form Input Text into uppercase:
......................................................................
import { fromEvent, map, of } from 'rxjs'
function main() {
    fromEvent(document.getElementById('username'), 'input')
        .pipe(
            map(e => e.target.value.toUpperCase())
        ).subscribe(value => console.log(value))
}
main()

Calculate Values:
.............................
import { fromEvent, map, of } from 'rxjs'
function main() {
    const price = of(100)
    price.pipe(
        map(price => price * 1.18), //Add 18%
        map(totalprice => totalprice * 5.0) //Add 5%
    ).subscribe(v => console.log(v))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									mapTo

Replace emissions with a Fixed value

The mapTo operator in rx js similar to map- instead of transforming each value; it replaces every emitted value with a constant value

->Takes a single Arg
->Use when you dont care about the original value, only the fact that something happened like event or status

import { mapTo, of } from "rxjs"
function main() {
    of(1, 2, 3).pipe(
        mapTo('Clicked')
    ).subscribe(val => console.log(val))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
						  buffer,bufferCount,bufferTime,bufferToggle
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Collect Emissions until notified

The buffer operator in Rxjs collects values from the source observable until another observable emits and then it emits those buffered values as an array.

buffer operator is a powerful tool for batching emitted values from a source observable until a notifier observable emits. Think of it as a “collect and release” mechanism.

 How It Works
- It collects values from the source observable into an array.
- When the notifier observable emits, it flushes the array downstream.
- Then it starts buffering again until the next notifier emission


import { buffer, from, fromEvent, interval, take } from "rxjs"

function main() {
    const clicks = fromEvent(document, 'click')
    const intervals = interval(1000)
    intervals.pipe(buffer(clicks)).subscribe(values => console.log('Buffered', values))
}
main()
- interval$ emits a value every second.
- clicks$ acts as the notifier.
- Every time you click, it emits the buffered array of interval values since the last click

**********************************************************************************************************************************************

Capture KeyPresses Until EnterKey:
import { buffer, filter, from, fromEvent, interval, take } from "rxjs"

function main() {
    const keydowns = fromEvent(document, 'keydown')
    const enterKey = keydowns.pipe(
        filter(e => e.key === 'Enter')
    )
    enterKey.pipe(
        buffer(enterKey)
    ).subscribe(v => console.log(v))
}
main()

🔍 Use Cases
- Batching user interactions (e.g., clicks, keystrokes).
- Reducing expensive operations by grouping events.
- Custom throttling or debouncing strategies.

🧩 Related Operators
| Operator | Behavior | 
| bufferCount | Emits buffer when a set number of values are collected. | 
| bufferTime | Emits buffer after a specified time interval. | 
| bufferToggle | Opens/closes buffers based on opening/closing observables. | 
| bufferWhen | Uses a function to determine when to close the buffer. | 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									bufferCount
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

It groups elements based on buffer size
collects values until the buffer size is reached
emits the buffered array downstream

Use case:
1.batch processing: send data in chunks to reduce load
2.UI event tracking : Capture last N keystorkes or clicks
3.Rate limiting : Control how often operations are triggered.

import { buffer, bufferCount, from, fromEvent, interval, take } from "rxjs"

function main() {
    const intervals = interval(1000)
    intervals.pipe(
        bufferCount(5)
    ).subscribe(values => console.log('Buffered', values))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										 bufferTime
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

What it does?
1Bufferes values for a specified duration
2.Emits the buffered array after each time span
import { buffer, bufferCount, bufferTime, from, fromEvent, interval, take } from "rxjs"

function main() {
    const intervals = interval(1000)
    intervals.pipe(
        bufferTime(2000) //emit every 2sec
    ).subscribe(values => console.log('Buffered', values))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									bufferToggle
*******************************************************************************************************************************************************

It is dynamic operator  that lets you open and close buffers based on signals  from two observables - one to start collecting values, and one to stop

What it does?
 starts buffering when the openings observables emits
Close the buffer when the closing selector observable
Emits the collected array and starts fresh one.

import { bufferToggle, fromEvent, interval } from "rxjs"

function main() {
    const clicks = fromEvent(document, 'click')
    const openings = interval(5000)//start buffering every 5 secs
    const closingSelector = () => interval(2000) // close the buffer after 2 secs
    const buffer = clicks.pipe(
        bufferToggle(openings, closingSelector)
    )
    buffer.subscribe(value => console.log(value))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									bufferWhen
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

->starts collecting values from the source observable
->calls the closing selector function, which returns observable 
->when that observable emits, the buffer is flushed and new one starts

import { bufferWhen, interval } from "rxjs"

function main() {
    const source = interval(500) //emits every 500secs
    const buffered = source.pipe(
        bufferWhen(() => interval(3000)) //close the buffer every 3 secs
    )
    buffered.subscribe(values => console.log(values))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								window,windowCount,windowTime,windowToggle,windowWhen
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

It is like buffer, but instead of collecting values into Arrays, it emits "Observable"- each representing a "window" of values from the source.

What it does?
->It Splits the source observable into multiple inner observables(windows)
->Each window collects values until a "WindowBoundaries" observable emits
->When that happens, the current window completes and a new one starts

import { fromEvent, interval,take,window,map, mergeAll } from "rxjs"

function main() {
    const clicks = fromEvent(document, 'click')
    const boundaries = interval(5000) //emits every 5 secs

    const windowed = clicks.pipe(
        window(boundaries), // create new window every 5 secs
        map(win=>win.pipe(take(2))),//take at most 2 clicks per window
        mergeAll() //flatten the inner observables
    )
    windowed.subscribe(val => console.log(val.x))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								windowCount
*****************************************************************************************************************************************************
Emits  a new inner observable(window) every startWindowEvery emissions
Each window collects ut to windowsize values
unlike bufferCount,it emits observables, not arrays

import { interval, mergeAll, windowCount } from "rxjs"

function main() {
    const source = interval(1000)
    const windowed = source.pipe(
        windowCount(5), // each window gets 3 values(obsverable)
        mergeAll()
    )
    windowed.subscribe(value => console.log(value))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								windowToggle
********************************************************************************************************************************************************

It is a transformation operator that lets you open and close "windows of emissions" based on two observables- one to start and one to stop, it is like bufferToggle, but instead of emitting arrays, it emits inner observables.

import { fromEvent, interval, mergeAll, windowToggle} from "rxjs"

function main() {
    const source = fromEvent(document,'click') 
    const openings = interval(5000) //open a window every 5 secs
    const closingSelector = ()=>interval(2000) //close the window after 2 secs

    const windowed = source.pipe(
        windowToggle(openings,closingSelector), // each window gets 3 values(obsverable)
        mergeAll()
    )
    windowed.subscribe(value => console.log(value))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								windowWhen
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Each window is an observable, that closes based on a custom condition.

import { fromEvent, interval, mergeAll, windowToggle, windowWhen} from "rxjs"

function main() {
    const source = interval(1000)

    const windowed = source.pipe(
        windowWhen(()=>interval(5000)), //close the window every 5 secs
        mergeAll()
    )
    windowed.subscribe(value => console.log(value))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									scan
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Scan operator is like reduce function in js.
It applies an accumulator function to each value emitted by the source observable and emits the intermediate result after every update.

What it does?
->Maintains internal state
->Applies an accumulator function to each emitted value
->Emits the updated state after each calculation

import { of, scan } from 'rxjs'

function main() {
    const numbers = of(1, 2, 3)
    numbers.pipe(
        scan((total, current) => total + current, 0)
    ).subscribe(val => console.log(val))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									 switchMap
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

It is higher Order mapping operator that transforms each value from a  source observable into a new inner Observable- and switches to the latest one, unsubscribing from any previous inner observable

What it does?
->Maps each source value to an inner Observable
->Cancels the previous inner observable when a new one arrives
->Emits values only from the most recent inner Observable

import { fromEvent, interval, switchMap } from 'rxjs'

function main() {
    const clicks = fromEvent(document, 'click')
    clicks.pipe(
        switchMap(() => interval(1000)) //starts new interval(obs) on each click
    ).subscribe(val=>console.log(val))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										MergeMap (flatMap)
								(subscribes to all inner Observables)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Maps each source value to an Observable
subscribes to all inner observable concurrently
emits values from all active inner streams as they arrive

import { fromEvent, interval, mergeMap } from 'rxjs'

function main() {
    const clicks = fromEvent(document, 'click')
    clicks.pipe(
        mergeMap(() => interval(1000))
    ).subscribe(val => console.log(val))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										concatMap
								 (Queues inner Observables sequentially)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
maps each source value to an observable
subscribes to the first inner observable
waits for it to complete before subscribing to the next
emits values from each inner observable in sequence

import { concatMap, fromEvent, interval, take } from 'rxjs'

function main() {
    const clicks = fromEvent(document, 'click')
    clicks.pipe(
        concatMap(() => interval(1000).pipe(take(4))) // emits 0-3 every second
    ).subscribe(val => console.log(val))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										groupBy
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

It splits "a source observables" into multiple grouped observables, each keyed by a value you represent.
It is like turning a stream into "a stream of categorized sub streams"

What it does?

1.Uses a keySelector function to determine the group by for each item
2.Emits groupedObservable for each unique key.
3.Each GroupedObservable emits items that the share same key.

import { from, groupBy, mergeMap, toArray } from 'rxjs'
function main() {
    //data set
    const people = [
        { name: 'Subramanian', age: 45 },
        { name: 'Geetha', age: 45 },

        { name: 'Murugan', age: 65 },
        { name: 'John', age: 65 },

        { name: 'Frank', age: 25 },
        { name: 'Erik', age: 26 },
        { name: 'Sue', age: 34 }
    ]
    from(people)
        .pipe(
            groupBy(person => person.age), //separate into observable based on condition
            mergeMap(group => group.pipe(toArray()))
        )
        .subscribe(val => console.log(val))
}
main()

Use cases:
1.Categorizing events -- group logs by info,warn
2.Reactive data pivoting - group form inputs by field type
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									partition 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

It is static function that splits a source observable into two separate observable based on a predicate function.

What it does?
1.Evaulates each value from the source observable using a predicate function
2.Returns a tuple of two observables
	-The first emits values that passes the predicate
      -  The second emits values that fail the predicate

import { of, partition } from 'rxjs'
function main() {

    const source = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    const [evenNumbers, oddNumbers] = partition(source, value => value % 2 === 0)
    evenNumbers.subscribe(val => console.log('Even :', val))
    oddNumbers.subscribe(val => console.log('Odd :', val))
}
main()

Eg:
you have data set like below:
	Refer todos data set:
import { from,  partition } from 'rxjs'
import TODOS from './mock-data/todos'
function main() {

    const source = from(TODOS)
    const [completedTodos, unCompletedTodos] = partition(source, todo => {
       
        return todo.completed === true
    })
    completedTodos.subscribe(val => {
       console.log(val)
    })
    unCompletedTodos.subscribe(val => console.log(val))
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										pairwise operator
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

It emits the previous and current values from a source observable as a tuple(array of two items)

What it does?
 ->Waits for at least two emissions
 -.Emits an array [prev,curr] for each new value
->Skips the first value (since there is no previous value yet

import { interval, pairwise } from 'rxjs'

function main() {
    interval(1000).pipe(
        pairwise()
    ).subscribe(([pre, curr]) => {
        console.log(`Previous Value ${pre} Current Value ${curr}`)
    })
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
